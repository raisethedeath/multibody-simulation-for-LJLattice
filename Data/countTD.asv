% 定义参数
ri0 = 5;
ro =20;
A = 0.15;
e0= 1;
t0 =1;
w = 3.1416*2/t0;
v0=sqrt(e0);
ve=0.1*v0;

t_t = 2*t0;
t_total = 30*t0;
t_interval = 0.1*t0;
t_start = 0.0;
t_end = 30*t0;


numFrames = t_total/t_interval+1; % 时间点
%numFrames_total = t_total/t_interval+1;
numFrames_t_start = t_start/t_interval;
numFrames_t_end = t_end/t_interval+1;

% 读取 CSV 文件并转换为矩阵
%LJ1 = readmatrix('energy_conservation/Cell-test,v=1v0,t=0.5,ri=5,ro=15,t_t=5,dt=0.0005.csv');
%LJ1 = readmatrix('dissipative_pendulum/Dissipative,k=0.001,A=0.2,w=2,ri=5,ro=15,t=1,t_interval=0.05.csv');
%LJ1 = readmatrix('pendulum/Cell,A=0.1,w=2,ri=5,ro=20,t=10,t_interval=0.10,dt=0.0001.csv');
%LJ1 = readmatrix('energy_conservation/test, cell, static, t_interval=0.01,dt=0.0005,ri=5,ro=15,t_total=2.csv ');
LJ1 = readmatrix('energy_conservation/relaxation, cell,ri=5,ro=20,dt=0.0004,ti=2,v=1,t_tot=30,interval=0.1.csv');
%LJ1 = readmatrix('expansion/elastic bound,cell,ri=5,ro=20,v=0.1,t_tot=100,interval=1,dt=0.001.csv');

numParticles = round(size(LJ1, 1) / (numFrames));
%colors = zeros(numParticles, 3); % 初始化颜色矩阵
%measure = zeros(numParticles,1);
g=zeros(numFrames,1);
b=zeros(numFrames,1);
r=zeros(numFrames,1);
y=zeros(numFrames,1);

%% 循环时间计算拓扑缺陷随时间的变化
for t=1:numFrames
    startIdx = (t-1) * numParticles + 1;
    endIdx = min(t * numParticles, size(LJ1, 1)); % 确保不超出矩阵范围
    %当前位置
    timeData = LJ1(startIdx:endIdx, :);
    ri = ri0 + ve*(t-1)*t_interval;
    
    if (ri<=7)
        ri = ri0 + ve*(t-1)*t_interval;
        %title(['$r_i=$ ', num2str(r),'$l_0$',', t=',num2str((t-1)*t_interval/t0),'$\tau_0$'],'interpreter', 'latex', 'FontSize', 10);
    end
    if (ri>7)
        ri=7;
        %title(['$r_i=$ ', num2str(7),'$l_0$',', t=',num2str((t-1)*t_interval/t0),'$\tau_0$'],'interpreter', 'latex', 'FontSize', 10);
    end
    %}
    radius = sqrt(timeData(:,2).^2+timeData(:,3).^2);
    %Judge_i = zeros(numParticles,1);
    %Judge_o = zeros(numParticles,1);
    Judge_i = radius >ri+1 &radius<ro+2.0;
    %Judge_o = radius > 
    tri = delaunay(timeData(:,2), timeData(:,3));
    % 初始化配位数数组
    neighborCounts = zeros(numParticles, 1);
    
    % 计算每个三角形的配位数
    for i = 1:size(tri, 1)
        triangle = tri(i, :); % 三角形的顶点索引
        for j = 1:3
            neighborCounts(triangle(j)) = neighborCounts(triangle(j)) + 1;
        end
    end
        
    
        % 根据配位数给小球着色
    for i = 1:numParticles
        if (Judge_i(i))
            switch neighborCounts(i)
                case 4
                    %colors(i, :) = [0, 1, 0]; % 绿色
                    %measure(i)=25;
                    g(t)=g(t)+1;
                case 7
                    %colors(i, :) = [0, 0, 1]; % 蓝色
                    %measure(i)=25;
                    b(t)=b(t)+1;
                case 6
                    %colors(i, :) = [0.5, 0.5, 0.5]; % 灰色
                    %measure(i)=10;
                case 5
                    %colors(i, :) = [1, 0, 0]; % 红色
                    %measure(i)=25;
                    r(t)=r(t)+1;
                case 8
                    %colors(i, :) = [1, 1, 0]; % 黄色
                    %measure(i)=25;
                    y(t)=y(t)+1;
   
            end
        end
        
    end
end
time= LJ1(size(LJ1, 1) / numFrames * numFrames_t_start+1 :size(LJ1, 1) / numFrames:size(LJ1, 1) / numFrames * numFrames_t_end , 9);

figure(2)
clf;
plot(time,r,'r-^', 'DisplayName', '5','LineWidth',0.5); hold on;
plot(time,b,'b-s', 'DisplayName', '7','LineWidth',0.5);
plot(time,y,'-o','DisplayName', '8','LineWidth',0.5,'Color',[1, 0.64706, 0]);
plot(time,g,'g--','DisplayName','4','LineWidth',0.5);
legend('show');
%{
    ax = gca;
    ax.YAxis.Exponent = 2;
    xlabel('$t/\tau_0$ ','interpreter', 'latex', 'FontSize', 10);
    ylabel('$E/\epsilon_0$ ','interpreter', 'latex', 'FontSize', 10);
    ylim([ymin,ymax*6])
    %axis([xmin xmax ymin 1.2*ymax])
    %}

title('Topological Defects Over Time');
grid on;

   

